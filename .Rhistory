main = "")
image(t(mat),xaxt="n",yaxt="n",col=icolors)
mypar(1,1)
image(t(mat),xaxt="n",yaxt="n",col=icolors)
mod <- model.matrix(~ X)
cleandat <- ComBat(dat, Z, mod)
tt <- genefilter::rowttests(cleandat, factor(X))
mypar(1, 2)
hist(tt$p[!chr %in% c("chrX", "chrY")], nc = 20, xlab = "p-value", ylim = HLIM,
main = "")
hist(tt$p[chr %in% c("chrY")], nc = 20, xlab = "p-value", ylim = c(0,9),
main = "")
data(GSE5859)
chr<-mget(featureNames(e),hgfocusCHRLOC)
chr <- sapply(chr,function(x){ tmp<-names(x[1]); ifelse(is.null(tmp),NA,paste0("chr",tmp))})
y<- colMeans(exprs(e)[which(chr=="chrY"),])
sex <- ifelse(y<4.5,"F","M")
batch <- format(pData(e)$date,"%y%m")
ind<-which(batch%in%c("0506","0510"))
set.seed(1)
N <- 12; N1 <-3; M<-12; M1<-9
ind <- c(sample(which(batch=="0506" & sex=="F"),N1),
sample(which(batch=="0510" & sex=="F"),N-N1),
sample(which(batch=="0506" & sex=="M"),M1),
sample(which(batch=="0510" & sex=="M"),M-M1))
table(batch[ind],sex[ind])
set.seed(1)
tt<-genefilter::rowttests(exprs(e)[,ind],factor(batch[ind]))
ind1 <- which(chr=="chrY") ##real differences
ind2 <- setdiff(c(order(tt$dm)[1:25],order(-tt$dm)[1:25]),ind1)
ind0 <- setdiff(sample(seq(along=tt$dm),50),c(ind2,ind1))
geneindex<-c(ind2,ind0,ind1)
mat<-exprs(e)[geneindex,ind]
mat <- mat-rowMeans(mat)#;mat[mat>3]<-3;mat[mat< -3]<- -3
icolors <- rev(brewer.pal(11,"RdYlBu"))
mypar(1,1)
image(t(mat),xaxt="n",yaxt="n",col=icolors)
dat <- exprs(e)[,ind]
X <- sex[ind] ## the covariate
Z <- batch[ind]
tt<-genefilter::rowttests(dat,factor(X))
HLIM<-c(0,1500)
mypar(1,2)
hist(tt$p[!chr%in%c("chrX","chrY")],nc=20,xlab="p-value",ylim=HLIM,main="")
hist(tt$p[chr%in%c("chrY")],nc=20,xlab="p-value",ylim=c(0,9),main="")
mod<-model.matrix(~X)
cleandat <- ComBat(dat,Z,mod)
tt<-genefilter::rowttests(cleandat,factor(X))
mypar(1,1)
hist(tt$p[!chr%in%c("chrX","chrY")],nc=20,xlab="p-value",ylim=HLIM,main="")
hist(tt$p[chr%in%c("chrY")],nc=20,xlab="p-value",ylim=c(0,9),main="")
times <- (pData(e)$date)
mypar(1,2)
o=order(times)
plot(times[o],pch=21,bg=as.fumeric(batch)[o],ylab="date")
o=order(times[ind])
plot(times[ind][o],pch=21,bg=as.fumeric(batch)[ind][o],ylab="date")
chr <- mget(featureNames(e), hgfocusCHRLOC)
chr <- sapply(chr, function(x) {
tmp <- names(x[1])
ifelse(is.null(tmp), NA, paste0("chr", tmp))
})
y <- colMeans(exprs(e)[which(chr == "chrY"), ])
hist(y, nc = 30)
sex <- ifelse(y < 5, "F", "M")
batch <- format(pData(e)$date, "%y%m")
ind <- which(batch %in% c("0506", "0510"))
set.seed(1)
N <- 12; N1 <-3;
M <- 12; M1 <- 9
ind <- c(sample(which(batch == "0506" & sex == "F"), N1),
sample(which(batch == "0510" & sex == "F"), N - N1),
sample(which(batch == "0506" & sex == "M"), M1),
sample(which(batch == "0510" & sex == "M"), M - M1))
table(batch[ind], sex[ind])
set.seed(1)
tt <- genefilter::rowttests(exprs(e)[, ind], factor(batch[ind]))
ind1 <- which(chr == "chrY") ##real differences
ind2 <- setdiff(c(order(tt$dm)[1:25], order(-tt$dm)[1:25]), ind1)
ind0 <- setdiff(sample(seq(along = tt$dm), 50), c(ind2, ind1))
geneindex <- c(ind2, ind0, ind1)
mat <- exprs(e)[geneindex, ind]
mat <- mat - rowMeans(mat)
icolors <- rev(brewer.pal(11, "RdYlBu"))
mypar(1,1)
image(t(mat), xaxt = "n", yaxt = "n", col = icolors)
dat <- exprs(e)[, ind]
X <- sex[ind] # the covariate
Z <- batch[ind]
tt <- genefilter::rowttests(dat, factor(X))
HLIM <- c(0, 1500)
mypar(1, 1)
hist(tt$p[!chr %in% c("chrX", "chrY")], nc = 20, xlab = "p-value", ylim = HLIM,
main = "")
hist(tt$p[chr %in% c("chrY")], nc = 20, xlab = "p-value", ylim = c(0,15),
main = "")
hist(tt$p[!chr %in% c("chrX", "chrY")], nc = 20, xlab = "p-value", ylim = HLIM,
main = "")
hist(tt$p[chr %in% c("chrY")], nc = 20, xlab = "p-value", ylim = c(0,15),
main = "")
hist(tt$p[!chr %in% c("chrX", "chrY")], nc = 20, xlab = "p-value", ylim = HLIM,
main = "")
mod <- model.matrix(~ X)
cleandat <- ComBat(dat, Z, mod)
tt <- genefilter::rowttests(cleandat, factor(X))
mypar(1, 2)
hist(tt$p[!chr %in% c("chrX", "chrY")], nc = 20, xlab = "p-value", ylim = HLIM,
main = "")
hist(tt$p[chr %in% c("chrY")], nc = 20, xlab = "p-value", ylim = c(0,9),
main = "")
tt <- genefilter::rowttests(dat, factor(X))
HLIM <- c(0, 1500)
mypar(1, 1)
hist(tt$p[!chr %in% c("chrX", "chrY")], nc = 20, xlab = "p-value", ylim = HLIM,
main = "")
hist(tt$p[chr %in% c("chrY")], nc = 20, xlab = "p-value", ylim = c(0, 12),
main = "")
tt <- genefilter::rowttests(dat, factor(X))
HLIM <- c(0, 1500)
mypar(1, 2)
hist(tt$p[!chr %in% c("chrX", "chrY")], nc = 20, xlab = "p-value", ylim = HLIM,
main = "")
hist(tt$p[chr %in% c("chrY")], nc = 20, xlab = "p-value", ylim = c(0, 12),
main = "")
tt <- genefilter::rowttests(cleandat, factor(X))
mypar(1, 2)
hist(tt$p[!chr %in% c("chrX", "chrY")], nc = 20, xlab = "p-value", ylim = HLIM,
main = "")
hist(tt$p[chr %in% c("chrY")], nc = 20, xlab = "p-value", ylim = c(0, 12),
main = "")
svafit <- sva(dat, mod)
svaX <- model.matrix(~X + svafit$sv)
svaX
lmfit <- lmFit(dat, svaX)
tt <- lmfit$coef[,2] * sqrt(lmfit$df.residual) / (2 * lmfit$sigma)
mypar(1, 2)
pval <- 2 * (1 - pt(abs(tt), lmfit$df.residual[1]))
hist(pval[!chr %in% c("chrX", "chrY")], xlab = "p-values", ylim = HLIM,
main = "")
hist(pval[chr %in% c("chrY")], nc = 20, xlab = "p-value", ylim = c(0, 9),
main = "")
hist(pval[!chr %in% c("chrX", "chrY")], xlab = "p-values", ylim = HLIM,
main = "")
hist(pval[chr %in% c("chrY")], nc = 20, xlab = "p-value", ylim = c(0, 12),
main = "")
source("http://bioconductor.org/biocLite.R")
biocLite("limma")
source("http://bioconductor.org/biocLite.R")
biocLite("limma")
install_github("rafalib","ririzarr")
packrat::install_github("ririzarr/rafalib")
packrat::install_github("genomicsclass/dagdata")
packrat::snapshot(prompt = FALSE)
biocLite("affy")
biocLite("GEOquery")
library(affy)
library(GEOquery)
fileList <- read.table("data/file_list.txt", stringsAsFactors = FALSE)
grep("GSE", fileList$V1)
grepl("label", fileList$V1)
labelFiles <- grepl("label", fileList$V1)
gseList <- fileList[!labelFiles, 1]
gseList <- gsub(".txt", "", gseList)
gseList
library(GEOquery)
geoq <- getGEO(fileList[1])
geoq <- getGEO(gseList[1], "data/")
gseList[1]
geoq <- getGEO(gseList[1])
geoq <- getGEO(gseList[1], destdir = "data/")
e <- exprs(geoq[[1]])
str(geoq)
pData <- phenoData(geoq)
phenoData(e)
pData <- phenoData(geoq[[1]])
pData
pData$sampleNames
sampleNames(pData)
install.packages("stringr")
library(stringr)
str_sub(gseList[1], 4, 6)
str_sub(gseList[1], -2, 6)
str_sub(gseList[1], -2, -1)
str_sub(gseList[1], -2, -1) <- "nn"
gseList[1]
str_sub(gseList[1], -2, -1) <- "15"
gseID <- gseList[1]
str_length(gseID)
test <- gseID
str_sub(test, -2, -1) <- "nnn"
test
test <- gseList[10]
teset
test
test <- gseList[5]
test
test <- gseList[3]
test
str_sub(test, -3, -1) <- "nnn"
test
createSubDirStr <- function(idStr) {
if (str_length(idStr) < 6) {
str_sub(idStr, -2, -1) <- "nnn"
} else {
str_sub(idStr, -3, -1) <- "nnn"
}
idStr
}
subDir <- createSubDirStr(gseID)
subDir
rawTag <- paste0(gseID, "/suppl/", gseID, "_RAW.tar")
str_pad(test, 3)
str_pad(test, 7)
createSubDirStr <- function(idStr) {
if (str_length(idStr) < 6) {
str_sub(idStr, -2, -1) <- "nnn/"
} else {
str_sub(idStr, -3, -1) <- "nnn/"
}
idStr
}
subDir <- createSubDirStr(gseID)
subDir
gseID <- gseList[1]
# build the address string for the current GSE
baseAddress <- "ftp://ftp.ncbi.nlm.nih.gov/geo/series/"
createSubDirStr <- function(idStr) {
if (str_length(idStr) < 6) {
str_sub(idStr, -2, -1) <- "nnn/"
} else {
str_sub(idStr, -3, -1) <- "nnn/"
}
idStr
}
subDir <- createSubDirStr(gseID)
rawTag <- paste0(gseID, "/suppl/", gseID, "_RAW.tar")
rawAddress <- paste0(baseAddress, subDir, rawTag)
rawAddress
if (!exists("data/tmp")) {
dir.create("data/tmp")
}
download.file(rawAddress, destfile = paste0("data/tmp", gseID),
method = "curl")
gseList[10]
gseID <- gseList[10]
if (!exists("data/tmp")) {
dir.create("data/tmp")
}
# build the address string for the current GSE
baseAddress <- "ftp://ftp.ncbi.nlm.nih.gov/geo/series/"
createSubDirStr <- function(idStr) {
if (str_length(idStr) < 6) {
str_sub(idStr, -2, -1) <- "nnn/"
} else {
str_sub(idStr, -3, -1) <- "nnn/"
}
idStr
}
subDir <- createSubDirStr(gseID)
rawTag <- paste0(gseID, "/suppl/", gseID, "_RAW.tar")
rawAddress <- paste0(baseAddress, subDir, rawTag)
!exists("data/tmp")
!exists("data/tmp/")
!file.exists("data/tmp/")
rawAddress
download.file(rawAddress, destfile = paste0("data/tmp/", gseID),
method = "curl")
write.table(gseID, "data/noRAW.txt", append = TRUE)
write.table(gseID, "data/noRAW.txt", append = TRUE)
write.csv(gseID, "data/noRAW.txt", append = TRUE)
write.csv(gseID, "data/noRAW.txt", append = TRUE)
write(gseID, "data/noRAW.txt", append = TRUE)
write(gseID, "data/noRAW.txt", append = TRUE)
write(gseID, "data/noRAW.txt", append = TRUE)
destAddress <- paste0("data/tmp/", gseID, "_RAW.tar")
print(paste("No RAW files found for", gseID))
warning(paste("No RAW files found for", gseID))
gseID <- gseList[1]
baseAddress <- "ftp://ftp.ncbi.nlm.nih.gov/geo/series/"
createSubDirStr <- function(idStr) {
if (str_length(idStr) < 6) {
str_sub(idStr, -2, -1) <- "nnn/"
} else {
str_sub(idStr, -3, -1) <- "nnn/"
}
idStr
}
subDir <- createSubDirStr(gseID)
rawTag <- paste0(gseID, "/suppl/", gseID, "_RAW.tar")
rawAddress <- paste0(baseAddress, subDir, rawTag)
destAddress <- paste0("data/tmp/", gseID, "_RAW.tar")
download.file(rawAddress,
destfile = destAddress,
method = "curl")
!file.exists("destAddress")
list.celfiles(listGzipped = TRUE)
!file.exists(destAddress)
gseID <- gseList[10]
destAddress <- paste0("data/tmp/", gseID, "_RAW.tar")
!file.exists(destAddress)
!file.exists(destAddress)
untar(destAddress, exdir = paste0("data/tmp/", gseID)
untar(destAddress, exdir = paste0("data/tmp/", gseID)
untar(destAddress, exdir = paste0("data/tmp/", gseID))
celAddress <- paste0("data/tmp/", gseID)
list.celfiles(celAddress)
affydata <- ReadAffy(celfile.path = celAddress)
sampleNames(affydata)
geoq <- getGEO(gseList[10], destdir = "data/")
pData <- phenoData(geoq[[1]])
sampleNames(pData)
geoq
geoq <- getGEO(gseList[10], destdir = "data/")
pData <- phenoData(geoq[[1]])
sampleNames(pData)
sampleNames(affydata)
summary(pData)
pData
varMetadata(pData)
fData <- featureData(affydata)
fData
fData <- featureData(geoq[])
fData <- featureData(geoq[1])
fData <- featureData(geoq[[1]])
fData
varMetaData(featureNames)
varMetadata(featureNames)
varMetaData(fData)
varMetadata(fData)
varMetadata(fData)$ENTREZ_GENE_ID
e <- exprs(geoq[[1]])
pData <- phenoData(e)
rm(pData)
rm(fData)
head(pData(e))
e <- geoq([[1]])
e <- geoq[[1]]
pData <- phenoData(e)
rm(pData)
head(pData(e))
pData <- phenoData(e)
pData
head(fData(e)$"Gene Symbol")
fData(e)
head(fData(e))
head(featureNames(affydata))
probes <- featureNames(affydata)
sampleNames(affydata)
samples <- gsub(".CEL.gz", "", sampleNames(affydata))
samples
normData <- rma(affydata)
exp <- exprs(normData)
dim(exp)
plot(exp[, 1])
def.off()
dev.off()
hist(exp[, 1])
head(exp)
normX <- exprs(normData)
fData <- featureData(e)
sampleNames(e)
sampleNames(pData)
head(featureNames(e))
sum(featureNames(e) != probes)
mismatch <- featureNames(e)(featureNames(e) != probes)
mismatch <- featureNames(e)[featureNames(e) != probes]
head(mismatch)
setdiff(featureNames(e), probes)
setdiff(probes, featureNames(e)
)
library(dplyr)
install.packages("dplyr")
library(dplyr)
intersect(c(1:4), c(2:5))
?with_order
?order_by
order_by(10:1, cumsum(1:10))
order_by(1:5, 5:1)
cumsum(1:5)
cumsum(1:10)
arrange(1:5, 5:1)
sortedXyData(c(1:5), c(5:1))
symbols <- fData$"Gene Symbol"
symbols
names(fData)
names(fData(e))
entrez <- fData$"ENTREZ_GENE_ID"
entrez
gseDat <- as.data.frame(normX)
View(gseDat)
colnames(gseDat) <- samples
View(gseDat)
head(featureNames(e))
probe <- featureNames(e)
featDat <- data.frame(probe = probe, symbol = symbol, entrez = entrez)
symbol <- fData$"Gene Symbol"
entrez <- fData$"ENTREZ_GENE_ID"
featDat <- data.frame(probe = probe, symbol = symbol, entrez = entrez)
View(featDat)
?left_join
?inner_join
x <- data.frame(a = 1:5, b = 3:7)
x
y <- data.frame(c = 5:1, d = 10:14)
y
inner_join(x, y, by = c("a", "c"))
inner_join(x, y)
x %>% mutate(c = a)
x %>% select(c = a)
x %>% select(c = a, b)
x %>% transform(c = a, b)
install.packages("plyr")
packrat::snapshot(prompt = FALSE)
library(plyr)
merge(x, y, by.x = "a", by.y = "c")
mergeDat <- merge(featDat, gseDat, by.x = probe, by.y = row.names)
mergeDat <- merge(featDat, gseDat, by.x = "probe", by.y = "row.names")
View(mergeDat)
write.table(paste0("data/", gseID, ".txt")
)
write.table(mergeDat, paste0("data/", gseID, ".txt"))
rm("data/tmp")
unlink("data/tmp", recursive = "TRUE")
packrat::set_opts(vcs.ignore.src = TRUE, external.packages = c(""))
source('~/Google Drive/MyCode/Projects/rankRobustness/assembleData.R', echo=TRUE)
source('~/Google Drive/MyCode/Projects/rankRobustness/assembleData.R', echo=TRUE)
x <- 1:5
for (i in x) {
if (i == 2) {
next
}
print(i)
}
!file.exists("data/no_raw.txt")
source('~/Google Drive/MyCode/Projects/rankRobustness/assembleData.R', echo=TRUE)
library(affy)
library(GEOquery)
library(stringr)
fileList <- read.table("data/file_list.txt", stringsAsFactors = FALSE)
labelFiles <- grepl("label", fileList$V1)
gseList <- fileList[!labelFiles, 1]
gseList <- gsub(".txt", "", gseList)
gseId <- gseList[5]
gseId
gseId <- gseList[6]
gseId <- gseList[6]
gseId
gseList[7]
gseID <- gseList[7]
celAddress <- paste0("data/tmp/", gseID)
list.celfiles(celAddress)
celFiles <- list.celfiles(celAddress)
celFile <- celFiles[1]
test <- ReadAffy(filenames = celFile, celfile.path = celAddress)
labelFiles <- fileList[labelFiles, 1]
labelFiles
labelFile <- labelFiles[1]
labels_tmp <- read.table(paste0("data/labels/", labelFile))
labels_tmp <- read.table(paste0("data/labels/", labelFile), nrows = 2)
View(labels_tmp)
labelsList <- data.frame(sample = NULL, pheno = NULL)
View(labelsList)
labelsList <- data.frame(sample = "", pheno = "NULL")
labelsList <- data.frame(sample = "", pheno = "")
View(labelsList)
labelsList <- data.frame(matrix(nrow = 0, ncol = 2))
View(labelsList)
labelsList <- data.frame(matrix(nrow = 0, ncol = 2),
colnames = c("sample", "pheno"))
labelsList <- data.frame(matrix(nrow = 0, ncol = 2),
names = c("sample", "pheno"))
labelsList <- data.frame(matrix(nrow = 0, ncol = 2))
colnames(labelsList) <- c("sample", "pheno")
View(labelsList)
t(labels_tmp)
labelsList <- rbind(labelsList, t(labels_tmp))
View(labelsList)
labelsList <- data.frame(matrix(nrow = 0, ncol = 2))
colnames(labelsList) <- c("sample", "pheno")
for (labelFile %in% labelFiles) {
labels_tmp <- read.table(paste0("data/labels/", labelFile), nrows = 2)
labelsList <- rbind(labelsList, t(labels_tmp))
}
labelsList <- data.frame(matrix(nrow = 0, ncol = 2))
colnames(labelsList) <- c("sample", "pheno")
for (labelFile in labelFiles) {
labels_tmp <- read.table(paste0("data/labels/", labelFile), nrows = 2)
labelsList <- rbind(labelsList, t(labels_tmp))
}
View(labelsList)
6*9210
55260/3600
9210/3600
source("http://bioconductor.org/biocLite.R")
biocLite("GSReg")
data(mtcars)
head(mtcars)
2.5*22
2.5:-0.1:1
seq(2.5, 1, -0.1)
t <- seq(2.5, 1, -0.1)
t <- seq(2.5, .5, -0.1)
t <- seq(2.5, .4, -0.1)
cumsum(t)
sum(t)
t
2+4+6+8+10
2+4+6+8
2+2+4+6+8
2+4+4+6+6
3+4+4+5+6
48721/3600
